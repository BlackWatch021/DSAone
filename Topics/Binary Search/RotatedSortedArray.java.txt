package com.company;
/*
There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.
Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1
Example 3:

Input: nums = [1], target = 0
Output: -1
* */

/*Approach 1
* checking four cases
* 1.arr[mid]>arr[mid+1], return mid(its pivot)
* 2.arr[mid]<arr[mid-1],return mid-1(its pivot)
* 3.arr[start]>arr[mid],end=mid-1
* 4.arr[start]<arr[mid],start=mid+1
* */




/*approach2
* 1.Find the biggest element(pivot)/mid. This will divide the array into two different parts.
* 2.if target<arr[mid], means, that there is a possibility that target is present in either of the intervals
* 3.if target<arr[0], then search right interval, start=mid+1,end =arr.length=1;
* 4if target>arr[0], then search left interval, start=0, end=mid;
* */

//public class RotatedSortedArray {
//    public static void main(String[] args) {
//        int[] arr={4,5,6,7,0,1,2};
//        int target=7;
//        System.out.println(search(arr,target));
//    }
//
//
//    static int search(int[] nums, int target) {
//         int start=0;
//         int end=nums.length-1;
//        while(start<=end){//finding the pivot point by moving the end point to the element where nums[start]<nums[end[
//             if(nums[start]>nums[end]){
//                 end=end-1;
//             }
////             else if(target>nums[end]){
////                 return -1;
////             }
//             else if(target<=nums[end]){//now checking the possibility that where the element can lie
//                 if(target<nums[start]){
//                   return  rightInterval(nums,target,end+1);
//                 }
//                 else{
//                    return leftInterval(nums,target,end);
//                 }
//             }
//             else{
//                 break;
//             }
//         }
//        return -1;
//    }
//    static int rightInterval(int[] nums,int target,int initial){
//        int start=initial;
//        int end=nums.length-1;
//        while(start<=end){
//            int mid=(start+end)/2;
//            if(target>nums[mid]){
//                start=mid+1;
//            }
//            else if(target<nums[mid]){
//                end=mid-1;
//            }
//            else{
//                return mid;
//            }
//        }
//        return -1;
//    }
//
//    static int leftInterval(int[] nums,int target,int initial){
//        int start=0;
//        int end=initial;
//        while(start<=end){
//            int mid=(start+end)/2;
//            if(target>nums[mid]){
//                start=mid+1;
//            }
//            else if(target<nums[mid]){
//                end=mid-1;
//            }
//            else{
//                return mid;
//            }
//        }
//        return -1;
//    }
//}
