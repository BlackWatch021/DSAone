///*There is an integer array nums sorted in non-decreasing order (not necessarily with distinct values).
//
//Before being passed to your function, nums is rotated at an unknown pivot index k (0 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,4,4,5,6,6,7] might be rotated at pivot index 5 and become [4,5,6,6,7,0,1,2,4,4].
//
//Given the array nums after the rotation and an integer target, return true if target is in nums, or false if it is not in nums.
//
//You must decrease the overall operation steps as much as possible.
//
//
//
//Example 1:
//
//Input: nums = [2,5,6,0,0,1,2], target = 0
//Output: true
//Example 2:
//
//Input: nums = [2,5,6,0,0,1,2], target = 3
//Output: false
//*/
//

package com.company;

public class SearchInRotatedSortedArrayII {
    public static void main(String[] args) {
        int[] arr = {3,0};
        int target=4;
        System.out.println(search(arr,target));
    }


    static boolean search(int[] nums, int target) {
        int pivot = findPivotWithDuplicates(nums);

        // if you did not find a pivot, it means the array is not rotated
        if (pivot == -1) {
            // just do normal binary search
            return binarySearch(nums, target, 0 , nums.length - 1);
        }

        // if pivot is found, you have found 2 asc sorted arrays
        if (nums[pivot] == target) {
            return true;
        }

        if (target >= nums[0]) {
            return binarySearch(nums, target, 0, pivot - 1);
        }

        return binarySearch(nums, target, pivot + 1, nums.length - 1);
    }

    static boolean binarySearch(int[] arr, int target, int start, int end) {
        while(start <= end) {
            // find the middle element
//            int mid = (start + end) / 2; // might be possible that (start + end) exceeds the range of int in java
            int mid = start + (end - start) / 2;

            if (target < arr[mid]) {
                end = mid - 1;
            } else if (target > arr[mid]) {
                start = mid + 1;
            } else {
                // ans found
                return true;
            }
        }
        return false;
    }




    static int findPivotWithDuplicates(int[] arr) {
        int start = 0;
        int end = arr.length - 1;
        while (start <= end) {
            int mid = start + (end - start) / 2;
            // 4 cases over here
            if (mid < end && arr[mid] > arr[mid + 1]) {
                return mid;
            }
            if (mid > start && arr[mid] < arr[mid - 1]) {
                return mid-1;
            }

            // if elements at middle, start, end are equal then just skip the duplicates
            if (arr[mid] == arr[start] && arr[mid] == arr[end]) {
                // skip the duplicates
                // NOTE: what if these elements at start and end were the pivot??
                // check if start is pivot
                if (start < end && arr[start] > arr[start + 1]) {
                    return start;
                }
                start++;

                // check whether end is pivot
                if (end > start && arr[end] < arr[end - 1]) {
                    return end - 1;
                }
                end--;
            }
            // left side is sorted, so pivot should be in right
            else if(arr[start] < arr[mid] || (arr[start] == arr[mid] && arr[mid] > arr[end])) {
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }
        return -1;
    }
}














//public class SearchInRotatedSortedArrayII {
//    public static void main(String[] args) {
//        int[] nums = {3,1};
//        int target = 0;
//        System.out.println(search(nums, target));
//    }
//
//    static boolean search(int[] nums, int target) {
//        int search = searchPivot(nums, target);
//        if(search==-1){
//           return binarySearch(nums,target,0,nums.length-1);
//        }
//        else if(target>nums[0]){
//            return binarySearch(nums,target,0,search);
//        }
//        else {
//            return binarySearch(nums,target,search-1,nums.length-1);
//        }
//    }
//    static int searchPivot(int[] nums,int target){
//        int start=0;
//        int end=nums.length-1;
//        while(start<=end){
//            int mid=(start+end)/2;
//            if(target==nums[mid]){
//                return mid;
//            }
//            if(mid<end && nums[mid]>nums[mid+1]){
//                return mid;
//            }
//            else if(mid>start && nums[mid]<nums[mid-1]){
//                return mid-1;
//            }
//            else if(nums[mid]==nums[start] && nums[mid]==nums[end]){
//                 if(start < end && nums[start]>nums[start+1]){
//                     return start;
//                 }
//                 start++;
//                 if(end > start && nums[end]<nums[end-1]){
//                     return end-1;
//                 }
//                 end--;
//            }
//            else if(nums[mid]>nums[start]||nums[mid]==nums[start] && nums[mid]>nums[end]){
//                start=mid+1;
//            }
//            else{
//                end=mid-1;
//            }
//        }
//        return -1;
//    }
//
//    static boolean binarySearch(int[] nums,int target,int initial,int last){
//        int start=initial;
//        int end=last;
//        while(start<=end){
//            int mid=(start+end)/2;
//            if(nums[mid]>target){
//                end=mid-1;
//            }
//            else if(nums[mid]<target){
//                start=start+1;
//            }
//            else{
//                return true;
//            }
//        }
//        return false;
//    }
//}














//package com.company;
////public class SearchInRotatedSortedArrayII {
//    public static void main(String[] args) {
//        int[] nums = {2,2,6,2,0,0,1,2};
//        int target=0 ;
//        System.out.println(search(nums,target));
//    }
//    static boolean search(int[] nums, int target) {
//        if(nums.length==1){
//            if(nums[0]==target){
//                return true;
//            }
//            else{
//                return false;
//            }
//        }
//        int pivot=searchPivot(nums,target);
//          if(nums[pivot]==target){
//              return true;
//          }
//          else if(target>nums[0]){
//              return findTarget(nums,target,0,pivot-1);
//          }
//          else{
//              return findTarget(nums,target,pivot+1,nums.length-1);
//          }
//    }
//    static int searchPivot(int[] nums, int target) {
//        int start=0;
//        int end=nums.length-1;
//        while(start<=end){
//            int mid=(start+end)/2;
//            if(mid<end && nums[mid]>nums[mid+1]){
//                return mid;
//            }
//            else if(mid>start && nums[mid]<nums[mid-1]){
//                return mid-1;
//            }
//            else if(nums[mid]<=nums[start]){
//                end=mid-1;
//            }
//            else{
//                start=mid+1;
//            }
//        }
//        return -1;
//    }
//
//    static boolean findTarget(int[] nums, int target,int initial, int last){
//        int start=initial;
//        int end=last;
//        while(start<=end){
//            int mid=(start+end)/2;
//            if(target<nums[mid]){
//                end-=1;
//            }
//            else if(target>nums[mid]){
//                start=mid+1;
//            }
//            else {
//                return true;
//            }
//        }
//        return false;
//    }
//}
