//https://leetcode.com/problems/find-in-mountain-array/


/*You may recall that an array arr is a mountain array if and only if:

arr.length >= 3
There exists some i with 0 < i < arr.length - 1 such that:
arr[0] < arr[1] < ... < arr[i - 1] < arr[i]
arr[i] > arr[i + 1] > ... > arr[arr.length - 1]
Given a mountain array mountainArr, return the minimum index such that mountainArr.get(index) == target. If such an index does not exist, return -1.

You cannot access the mountain array directly. You may only access the array using a MountainArray interface:

MountainArray.get(k) returns the element of the array at index k (0-indexed).
MountainArray.length() returns the length of the array.*/

/*
 * SOL.
 * 1.Find the peak element in the array
 * 2.This element separates the array into two parts, one. ascending, second. descending
 * 3.Find the element in these two sub arrays*/


package com.company.binarySearch;

public class findInMountainArray {
    public static void main(String[] args) {
        int[] arr={1,2,4,5,3,1};
        int target=3;
        System.out.println(findInMountainArray(arr, target));
    }
    static int findInMountainArray(int[] arr,int target){
        int start=0;
        int end=arr.length-1;
        while(start<end){
            int mid=(start+end)/2;
            if(arr[mid]>arr[mid+1]){
                end=mid;
            }
            else{
                start=mid+1;
            }
        }
        int asc= nextSearchAsc(arr,start,target);
        int desc=-1;
        if(asc==-1){
             desc=nextSearchDesc(arr,start,target);
        }
        if(asc!=-1){
            return asc;
        }
        else if(desc!=-1){
            return desc;
        }
        else {
            return -1;
        }
    }
    static int nextSearchAsc(int[] arr,int initial,int target){
        int start=0;
        int end=initial;
        while(start<=end){
            int mid=(start+end)/2;
            if(target>arr[mid]){
                start=mid+1;
            }
            else if(target<arr[mid]){
                end=mid-1;
            }
            else{
                return mid;
            }
        }
        return -1;
    }
    static int nextSearchDesc(int[] arr,int initial,int target){
        int start=initial;
        int end=arr.length-1;
        while(start<=end){
            int mid=(start+end)/2;
            if(target>arr[mid]){
                end=mid-1;
            }
            else if(target<arr[mid]){
                start=mid+1;
            }
            else{
                return mid;
            }
        }
        return -1;
    }
}
