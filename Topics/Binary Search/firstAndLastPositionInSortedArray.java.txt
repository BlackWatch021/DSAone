/*
* Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.
* */

package com.company;
import java.util.Arrays;
public class firstAndLastPositionInSortedArray {
    public static void main(String[] args) {
        int[] arr={5,7,7,8,8,10};
//        int[] arr={5,7,7,8,8,10};
//        int[] arr={};
//        int[] arr={1,2,3,4,5,6,7,7,9,9};
        int target=8;
        System.out.println(Arrays.toString(searchRange(arr,target)));
    }
    static int[] searchRange(int[] nums, int target) {
        int[] ans={-1,-1};
        ans[0]=search(nums,target,true);
        if(ans[0]!=-1){
            ans[1]=search(nums,target,false);
        }
        return ans;
    }
    static int search(int[] nums,int target,boolean findStartIndex){
        int ans=-1;
        int start=0;
        int end=nums.length-1;
        while(start<=end){
            int mid=(start+end)/2;
            if(target>nums[mid]){
                start=mid+1;
            }
            else if(target<nums[mid]){
                end=mid-1;
            }
            else{
                ans=mid;        //At this point we got the possible answer. But it is possible that another target element lies on either right or left of the middle                                   element. So to check this, we will again run the binary search on the right and left intervals.
                if(findStartIndex){   //searching on the left interval
                    end=mid-1;
                }
                else{
                    start=mid+1;      //searching on the right interval
                }
            }
        }
        return ans;
    }

}
