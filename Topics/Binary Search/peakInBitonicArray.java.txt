/*A peak element is an element that is strictly greater than its neighbors.

Given an integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.

You may imagine that nums[-1] = nums[n] = -âˆž.

You must write an algorithm that runs in O(log n) time.*/


package com.company;


public class peakInBitonicArray {
    public static void main(String[] args) {
        int[] arr={1,2,1233,20,16};
        System.out.println(findPeakElement(arr));
    }
    static int findPeakElement(int[] arr){
        int start=0;
        int end=arr.length-1;
        while(start<end){
            int mid=(start+end)/2;
            if(arr[mid]>arr[mid+1]){//mid lies in the ascending part
                end=mid;
                // you are in dec part of array
                // this may be the ans, but look at left
                // this is why end != mid - 1
            }
            else{
              //you are in asc part of array
                start=mid+1;//because we know that mid+1 element > mid element
            }
        }
        // in the end, start == end and pointing to the largest number because of the 2 checks above
        // start and end are always trying to find max element in the above 2 checks
        // hence, when they are pointing to just one element, that is the max one because that is what the checks say
        // more elaboration: at every point of time for start and end, they have the best possible answer till that time
        // and if we are saying that only one item is remaining, hence cuz of above line that is the best possible ans
        return start;
    }
}






//Linear Search(Brute force)
//public class peakInBitonicArray {
//    public static void main(String[] args) {
//        int[] arr={1,2,4,6,78,99,54,42,22,3};
//        System.out.println(search(arr));
//    }
//    static int search(int[] arr){
//        int ans=-1;
//        for (int i = 1; i <arr.length ; i++) {
//            if(i!=arr.length-1){
//                if(arr[i]>arr[i-1]&&arr[i]>arr[i+1]){
//                    ans=arr[i];
//                }
//            }
//        }
//        return ans;
//    }
//}
