/*
Search a 2D Matrix II
Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:

Integers in each row are sorted in ascending from left to right.
Integers in each column are sorted in ascending from top to bottom.

* */


/*
* Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
* */


/*
Given a matrix, you have to find the given target in the matrix and return its positions if it is present in it, else
return [-1,-1]
* */

package com.company;
import java.util.Arrays;
public class rowColMatrix {
    public static void main(String[] args) {
        int[][] matrix={{1, 5, 9, 11},
                {14, 20, 21, 26},
                {30, 34, 43, 50}};
            int target=11           ;

        System.out.println(Arrays.toString(search(matrix,target)));
    }
    static int[] search(int[][] matrix, int target){
        int row=0;
        int column=matrix[0].length-1;
        while(row<matrix.length && column >=0){
            if(matrix[row][column]>target){
                column--;
            }
            else if(matrix[row][column]<target){
                row++;
            }

            else{
                return new int[]{row,column};
            }
        }
        return new int[]{-1,-1};
    }
}
