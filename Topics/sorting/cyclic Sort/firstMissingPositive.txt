/*
First Missing Positive
https://leetcode.com/problems/first-missing-positive/


Given an unsorted integer array nums, return the smallest missing positive integer.

You must implement an algorithm that runs in O(n) time and uses constant extra space.



Example 1:

Input: nums = [1,2,0]
Output: 3
Example 2:

Input: nums = [3,4,-1,1]
Output: 2
Example 3:

Input: nums = [7,8,9,11,12]
Output: 1
* */
package com.company.sorting.cyclicSort;

import java.util.Arrays;

//Second approach, it is almost twice faster and uses almost 26ms less(size). This is possible by just change a small
// code in the end



public class firstMissingPositive {
    public static void main(String[] args) {
        int[] arr={3,4,-1,1};
        System.out.println(firstMissingPositive(arr));
    }
    static int firstMissingPositive(int[] nums) {
        int i=0;
        while(i<nums.length){
            int correct=nums[i]-1;
            if(correct>=nums.length || correct<0){
                i++;
            }
            else if(nums[i]!=nums[correct]){
                int temp=nums[i];
                nums[i]=nums[correct];
                nums[correct]=temp;
            }
            else{
                i++;
            }
        }
        int ans=0;
        for (int j = 0; j < nums.length; j++) {
            if(nums[j]!=j+1){
                return  j+1;
            }
            else{
                ans=j+2;
            }

        }
        return ans;
    }
}


//First approach



//public class firstMissingPositive {
//    public static void main(String[] args) {
//        int[] arr={3,4,-1,1};
//        System.out.println(firstMissingPositive(arr));
//    }
//    static int firstMissingPositive(int[] nums) {
//        int i=0;
//        while(i<nums.length){
//            int correct=nums[i]-1;
//            if(correct>=nums.length || correct<0){
//                i++;
//            }
//            else if(nums[i]!=nums[correct]){
//                int temp=nums[i];
//                nums[i]=nums[correct];
//                nums[correct]=temp;
//            }
//            else{
//                i++;
//            }
//        }
//        int ans=0;
//        for (int j = 0; j < nums.length; j++) {
//            if(nums[j]!=j+1){
//                 return  j+1;
//            }
//            else{
//                ans=j+2;
//            }
//
//        }
//        return ans;
//    }
//}
