/*

https://leetcode.com/problems/missing-number/submissions/

* Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing
* from the array.



Example 1:

Input: nums = [3,0,1]
Output: 2
Explanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since
* it does not appear in nums.
Example 2:

Input: nums = [0,1]
Output: 2
Explanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since
* it does not appear in nums.
Example 3:

Input: nums = [9,6,4,2,3,5,7,0,1]
Output: 8
Explanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since
* it does not appear in nums.
*
* Follow up: Could you implement a solution using only O(1) extra space complexity and O(n) runtime complexity?
* 

STEPS
1.First we have to sort the array,and note that if the element is equal to the arr.length, then we have to skip it. cause the 
array don't index for that element.
EX.[3,0,1] 
here n=3 but since the range is starting from 0. It means it should ideally contain 0,1,2 but it is containing n(3). Hence we 
have to ignore n in the array.
2.Once we get the sorted array, then simply loop over the array and return the index when the condition (arr[i]!=i) is met.
cause the correct position of the element in the array is itself as the range is from 0-n.
3.Case if all the elements are present in the array, then return n.
*/
package com.company.sorting.cyclicSort;


public class missingNumber {
    public static void main(String[] args) {
        int[] arr={9,6,4,2,3,5,7,0,1};
        System.out.println(missingNumber(arr));
//        System.out.println(Arrays.toString(arr));
    }
    static int missingNumber(int[] nums) {
        int i=0;
        while(i<nums.length){
            int correct=nums[i];
            if(nums.length==nums[i]){
                i++;
            }
            else if(nums[i]!=nums[correct]){
                int temp=nums[i];
                nums[i]=nums[correct];
                nums[correct]=temp;
            }
            else{
                i++;
            }
        }
        int index=0;
        while(index<nums.length){
            int correct=nums[index];
            if(index!=nums[index]){
                return index;
            }
            else{
                index++;
            }
        }
        return index;
    }

}
