/*
Height Checker
https://leetcode.com/problems/height-checker/

A school is trying to take an annual photo of all the students. The students are asked to stand in a single file line in non-decreasing order by height. Let this ordering be represented by the integer array expected where expected[i] is the expected height of the ith student in line.

You are given an integer array heights representing the current order that the students are standing in. Each heights[i] is the height of the ith student in line (0-indexed).

Return the number of indices where heights[i] != expected[i].



Example 1:

Input: heights = [1,1,4,2,1,3]
Output: 3
Explanation:
heights:  [1,1,4,2,1,3]
expected: [1,1,1,2,3,4]
Indices 2, 4, and 5 do not match.
Example 2:

Input: heights = [5,1,2,3,4]
Output: 5
Explanation:
heights:  [5,1,2,3,4]
expected: [1,2,3,4,5]
All indices do not match.
Example 3:

Input: heights = [1,2,3,4,5]
Output: 0
Explanation:
heights:  [1,2,3,4,5]
expected: [1,2,3,4,5]
All indices match.
* */

/*
Approach
To check whether the student i is at right position in the given array,  we cross check it with the array which has the right
order of all the students. Then we can tell, how many students are at the wrong position

STEPS
1. Clone the given array
2. Sort the cloned array
3.Now compare both the arrays (heights[i]!=expected[i]), if its true, means the student is standing at the wrong position
We have to tell the number of students at standing at the wrong position. So just increase the count and return it.
* */
package com.company.sorting;

import java.util.Arrays;

public class heightChecker {
    public static void main(String[] args) {
     int[] arr={1,2,3,4,5};
        System.out.println(heightChecker(arr));
    }
    static int heightChecker(int[] heights) {
        int[] expected=new int[heights.length];
        for (int i = 0; i <heights.length; i++) {
            expected[i]=heights[i];
        }

        for (int i = 0; i <expected.length ; i++) {
            int biggest=expected[0];
            int index=0;
            for (int j = 0; j <=expected.length-1-i ; j++) {
                if(expected[j]>biggest){
                    biggest=expected[j];
                    index=j;
                }
            }
//
            int temp=expected[expected.length-1-i];
            expected[expected.length-1-i]=expected[index];
            expected[index]=temp;
        }
        int ans=0;
        for (int i = 0; i <heights.length ; i++) {
            if(heights[i]!=expected[i]){
                ans++;
            }
        }
        return ans;
    }
}
